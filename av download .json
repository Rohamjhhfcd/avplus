[{"code":"\n}\n\npublic static class PRDownloader {\n    private PRDownloader() {\n\t\t\t    }\n    public static void initialize(Context context) {\n\t\t\t        initialize(context, PRDownloaderConfig.newBuilder().build());\n\t\t\t    }\n    public static void initialize(Context context, PRDownloaderConfig config) {\n\t\t\t        ComponentHolder.getInstance().init(context, config);\n\t\t\t        DownloadRequestQueue.initialize();\n\t\t\t    }\n    public static DownloadRequestBuilder download(String url, String dirPath, String fileName) {\n\t\t\t        return new DownloadRequestBuilder(url, dirPath, fileName);\n\t\t\t    }\n    public static void pause(int downloadId) {\n\t\t\t        DownloadRequestQueue.getInstance().pause(downloadId);\n\t\t\t    }\n    public static void resume(int downloadId) {\n\t\t\t        DownloadRequestQueue.getInstance().resume(downloadId);\n\t\t\t    }\n    public static void cancel(int downloadId) {\n\t\t\t        DownloadRequestQueue.getInstance().cancel(downloadId);\n\t\t\t    }\n    public static void cancel(Object tag) {\n\t\t\t        DownloadRequestQueue.getInstance().cancel(tag);\n\t\t\t    }\n    public static void cancelAll() {\n\t\t\t        DownloadRequestQueue.getInstance().cancelAll();\n\t\t\t    }\n    public static Status getStatus(int downloadId) {\n\t\t\t        return DownloadRequestQueue.getInstance().getStatus(downloadId);\n\t\t\t    }\n    public static void cleanUp(int days) {\n\t\t\t        Utils.deleteUnwantedModelsAndTempFiles(days);\n\t\t\t    }\n    public static void shutDown() {\n\t\t\t        Core.shutDown();\n\t\t\t    }\n}\n\npublic static class Response {\n    private Error error;\n    private boolean isSuccessful;\n    private boolean isPaused;\n    private boolean isCancelled;\n    public Error getError() {\n\t\t\t        return error;\n\t\t\t    }\n    public void setError(Error error) {\n\t\t\t        this.error \u003d error;\n\t\t\t    }\n    public boolean isSuccessful() {\n\t\t\t        return isSuccessful;\n\t\t\t    }\n    public void setSuccessful(boolean successful) {\n\t\t\t        isSuccessful \u003d successful;\n\t\t\t    }\n    public boolean isPaused() {\n\t\t\t        return isPaused;\n\t\t\t    }\n    public void setPaused(boolean paused) {\n\t\t\t        isPaused \u003d paused;\n\t\t\t    }\n    public boolean isCancelled() {\n\t\t\t        return isCancelled;\n\t\t\t    }\n    public void setCancelled(boolean cancelled) {\n\t\t\t        isCancelled \u003d cancelled;\n\t\t\t    }\n}\n\npublic static enum Status {\n    QUEUED,\n    RUNNING,\n    PAUSED,\n    COMPLETED,\n    CANCELLED,\n    UNKNOWN\n}\n\npublic static class Progress implements java.io.Serializable {\n    public long currentBytes;\n    public long totalBytes;\n    public Progress(long currentBytes, long totalBytes) {\n\t\t\t        this.currentBytes \u003d currentBytes;\n\t\t\t        this.totalBytes \u003d totalBytes;\n\t\t\t    }\n    @Override\n    public String toString() {\n\t\t\t        return \"Progress{\" +\n\t\t\t                \"currentBytes\u003d\" + currentBytes +\n\t\t\t                \", totalBytes\u003d\" + totalBytes +\n\t\t\t                \u0027}\u0027;\n\t\t\t    }\n}\n\npublic static enum Priority {\n    LOW,\n    MEDIUM,\n    HIGH,\n    IMMEDIATE\n}\n\n\npublic static class PRDownloaderConfig {\n    private int readTimeout;\n    private int connectTimeout;\n    private String userAgent;\n    private HttpClient httpClient;\n    private boolean databaseEnabled;\n    private PRDownloaderConfig(Builder builder) {\n\t\t\t        this.readTimeout \u003d builder.readTimeout;\n\t\t\t        this.connectTimeout \u003d builder.connectTimeout;\n\t\t\t        this.userAgent \u003d builder.userAgent;\n\t\t\t        this.httpClient \u003d builder.httpClient;\n\t\t\t        this.databaseEnabled \u003d builder.databaseEnabled;\n\t\t\t    }\n    public int getReadTimeout() {\n\t\t\t        return readTimeout;\n\t\t\t    }\n    public void setReadTimeout(int readTimeout) {\n\t\t\t        this.readTimeout \u003d readTimeout;\n\t\t\t    }\n    public int getConnectTimeout() {\n\t\t\t        return connectTimeout;\n\t\t\t    }\n    public void setConnectTimeout(int connectTimeout) {\n\t\t\t        this.connectTimeout \u003d connectTimeout;\n\t\t\t    }\n    public String getUserAgent() {\n\t\t\t        return userAgent;\n\t\t\t    }\n    public void setUserAgent(String userAgent) {\n\t\t\t        this.userAgent \u003d userAgent;\n\t\t\t    }\n    public HttpClient getHttpClient() {\n\t\t\t        return httpClient;\n\t\t\t    }\n    public void setHttpClient(HttpClient httpClient) {\n\t\t\t        this.httpClient \u003d httpClient;\n\t\t\t    }\n    public boolean isDatabaseEnabled() {\n\t\t\t        return databaseEnabled;\n\t\t\t    }\n    public void setDatabaseEnabled(boolean databaseEnabled) {\n\t\t\t        this.databaseEnabled \u003d databaseEnabled;\n\t\t\t    }\n    public static Builder newBuilder() {\n\t\t\t        return new Builder();\n\t\t\t    }\n    public static class Builder {\n\t\t\t        int readTimeout \u003d Constants.DEFAULT_READ_TIMEOUT_IN_MILLS;\n\t\t\t        int connectTimeout \u003d Constants.DEFAULT_CONNECT_TIMEOUT_IN_MILLS;\n\t\t\t        String userAgent \u003d Constants.DEFAULT_USER_AGENT;\n\t\t\t        HttpClient httpClient \u003d new DefaultHttpClient();\n\t\t\t        boolean databaseEnabled \u003d false;\n\t\t\t        public Builder setReadTimeout(int readTimeout) {\n\t\t\t\t\t\t            this.readTimeout \u003d readTimeout;\n\t\t\t\t\t\t            return this;\n\t\t\t\t\t\t        }\n\t\t\t        public Builder setConnectTimeout(int connectTimeout) {\n\t\t\t\t\t\t            this.connectTimeout \u003d connectTimeout;\n\t\t\t\t\t\t            return this;\n\t\t\t\t\t\t        }\n\t\t\t        public Builder setUserAgent(String userAgent) {\n\t\t\t\t\t\t            this.userAgent \u003d userAgent;\n\t\t\t\t\t\t            return this;\n\t\t\t\t\t\t        }\n\t\t\t        public Builder setHttpClient(HttpClient httpClient) {\n\t\t\t\t\t\t            this.httpClient \u003d httpClient;\n\t\t\t\t\t\t            return this;\n\t\t\t\t\t\t        }\n\t\t\t        public Builder setDatabaseEnabled(boolean databaseEnabled) {\n\t\t\t\t\t\t            this.databaseEnabled \u003d databaseEnabled;\n\t\t\t\t\t\t            return this;\n\t\t\t\t\t\t        }\n\t\t\t        public PRDownloaderConfig build() {\n\t\t\t\t\t\t            return new PRDownloaderConfig(this);\n\t\t\t\t\t\t        }\n\t\t\t    }\n}\n\n\npublic static final class Constants {\n    private Constants() {\n\t\t\t    }\n    public static final int UPDATE \u003d 0x01;\n    public static final String RANGE \u003d \"Range\";\n    public static final String ETAG \u003d \"ETag\";\n    public static final String USER_AGENT \u003d \"User-Agent\";\n    public static final String DEFAULT_USER_AGENT \u003d \"Gymkhana-Studio\";\n    public static final int DEFAULT_READ_TIMEOUT_IN_MILLS \u003d 20_000;\n    public static final int DEFAULT_CONNECT_TIMEOUT_IN_MILLS \u003d 20_000;\n    public static final int HTTP_RANGE_NOT_SATISFIABLE \u003d 416;\n    public static final int HTTP_TEMPORARY_REDIRECT \u003d 307;\n    public static final int HTTP_PERMANENT_REDIRECT \u003d 308;\n}\n\npublic static class Error {\n    private boolean isServerError;\n    private boolean isConnectionError;\n    public boolean isServerError() {\n\t\t\t        return isServerError;\n\t\t\t    }\n    public void setServerError(boolean serverError) {\n\t\t\t        isServerError \u003d serverError;\n\t\t\t    }\n    public boolean isConnectionError() {\n\t\t\t        return isConnectionError;\n\t\t\t    }\n    public void setConnectionError(boolean connectionError) {\n\t\t\t        isConnectionError \u003d connectionError;\n\t\t\t    }\n}\n\npublic static interface OnCancelListener {\n    void onCancel();\n}\n\npublic static interface OnDownloadListener {\n    void onDownloadComplete();\n    void onError(Error error);\n}\n\npublic static interface OnPauseListener {\n    void onPause();\n}\n\npublic static interface OnProgressListener {\n    void onProgress(Progress progress);\n}\n\npublic static interface OnStartOrResumeListener {\n    void onStartOrResume();\n}\n\n\n\npublic static class ProgressHandler extends Handler {\n    private final OnProgressListener listener;\n    public ProgressHandler(OnProgressListener listener) {\n\t\t\t        super(Looper.getMainLooper());\n\t\t\t        this.listener \u003d listener;\n\t\t\t    }\n    @Override\n    public void handleMessage(Message msg) {\n\t\t\t        switch (msg.what) {\n\t\t\t\t\t\t            case Constants.UPDATE:\n\t\t\t\t\t\t                if (listener !\u003d null) {\n\t\t\t\t\t\t\t\t\t                    final Progress progress \u003d (Progress) msg.obj;\n\t\t\t\t\t\t\t\t\t                    listener.onProgress(progress);\n\t\t\t\t\t\t\t\t\t                }\n\t\t\t\t\t\t                break;\n\t\t\t\t\t\t            default:\n\t\t\t\t\t\t                super.handleMessage(msg);\n\t\t\t\t\t\t                break;\n\t\t\t\t\t\t        }\n\t\t\t    }\n}\n\npublic static class DefaultHttpClient implements HttpClient {\n    private java.net.URLConnection connection;\n    public DefaultHttpClient() {\n\t\t\t    }\n    @SuppressWarnings(\"CloneDoesntCallSuperClone\")\n    @Override\n    public HttpClient clone() {\n\t\t\t        return new DefaultHttpClient();\n\t\t\t    }\n    @Override\n    public void connect(DownloadRequest request) throws java.io.IOException {\n\t\t\t        connection \u003d new java.net.URL(request.getUrl()).openConnection();\n\t\t\t        connection.setReadTimeout(request.getReadTimeout());\n\t\t\t        connection.setConnectTimeout(request.getConnectTimeout());\n\t\t\t        final String range \u003d String.format(Locale.ENGLISH,\n\t\t\t                \"bytes\u003dd-\", request.getDownloadedBytes());\n\t\t\t        connection.addRequestProperty(Constants.RANGE, range);\n\t\t\t        connection.addRequestProperty(Constants.USER_AGENT, request.getUserAgent());\n\t\t\t        addHeaders(request);\n\t\t\t        connection.connect();\n\t\t\t    }\n    @Override\n    public int getResponseCode() throws java.io.IOException {\n\t\t\t        int responseCode \u003d 0;\n\t\t\t        if (connection instanceof java.net.HttpURLConnection) {\n\t\t\t\t\t\t            responseCode \u003d ((java.net.HttpURLConnection) connection).getResponseCode();\n\t\t\t\t\t\t        }\n\t\t\t        return responseCode;\n\t\t\t    }\n    @Override\n    public java.io.InputStream getInputStream() throws java.io.IOException {\n\t\t\t        return connection.getInputStream();\n\t\t\t    }\n    @Override\n    public long getContentLength() {\n\t\t\t        String length \u003d connection.getHeaderField(\"Content-Length\");\n\t\t\t        try {\n\t\t\t\t\t\t            return Long.parseLong(length);\n\t\t\t\t\t\t        } catch (NumberFormatException e) {\n\t\t\t\t\t\t            return -1;\n\t\t\t\t\t\t        }\n\t\t\t    }\n    @Override\n    public String getResponseHeader(String name) {\n\t\t\t        return connection.getHeaderField(name);\n\t\t\t    }\n    @Override\n    public void close() {\n\t\t\t    }\n    private void addHeaders(DownloadRequest request) {\n\t\t\t        final HashMap\u003cString, List\u003cString\u003e\u003e headers \u003d request.getHeaders();\n\t\t\t        if (headers !\u003d null) {\n\t\t\t\t\t\t            Set\u003cMap.Entry\u003cString, List\u003cString\u003e\u003e\u003e entries \u003d headers.entrySet();\n\t\t\t\t\t\t            for (Map.Entry\u003cString, List\u003cString\u003e\u003e entry : entries) {\n\t\t\t\t\t\t\t\t\t                String name \u003d entry.getKey();\n\t\t\t\t\t\t\t\t\t                List\u003cString\u003e list \u003d entry.getValue();\n\t\t\t\t\t\t\t\t\t                if (list !\u003d null) {\n\t\t\t\t\t\t\t\t\t\t\t\t                    for (String value : list) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t                        connection.addRequestProperty(name, value);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t                    }\n\t\t\t\t\t\t\t\t\t\t\t\t                }\n\t\t\t\t\t\t\t\t\t            }\n\t\t\t\t\t\t        }\n\t\t\t    }\n\n}\n\npublic static interface HttpClient extends Cloneable {\n    HttpClient clone();\n    void connect(DownloadRequest request) throws java.io.IOException;\n    int getResponseCode() throws java.io.IOException;\n    java.io.InputStream getInputStream() throws java.io.IOException;\n    long getContentLength();\n    String getResponseHeader(String name);\n    void close();\n}\n\npublic static class DownloadRequest {\n    private Priority priority;\n    private Object tag;\n    private String url;\n    private String dirPath;\n    private String fileName;\n    private int sequenceNumber;\n    private java.util.concurrent.Future future;\n    private long downloadedBytes;\n    private long totalBytes;\n    private int readTimeout;\n    private int connectTimeout;\n    private String userAgent;\n    private OnProgressListener onProgressListener;\n    private OnDownloadListener onDownloadListener;\n    private OnStartOrResumeListener onStartOrResumeListener;\n    private OnPauseListener onPauseListener;\n    private OnCancelListener onCancelListener;\n    private int downloadId;\n    private HashMap\u003cString, List\u003cString\u003e\u003e headerMap;\n    private Status status;\n\n    DownloadRequest(DownloadRequestBuilder builder) {\n\t\t\t        this.url \u003d builder.url;\n\t\t\t        this.dirPath \u003d builder.dirPath;\n\t\t\t        this.fileName \u003d builder.fileName;\n\t\t\t        this.headerMap \u003d builder.headerMap;\n\t\t\t        this.priority \u003d builder.priority;\n\t\t\t        this.tag \u003d builder.tag;\n\t\t\t        this.readTimeout \u003d\n\t\t\t                builder.readTimeout !\u003d 0 ?\n\t\t\t                        builder.readTimeout :\n\t\t\t                        getReadTimeoutFromConfig();\n\t\t\t        this.connectTimeout \u003d\n\t\t\t                builder.connectTimeout !\u003d 0 ?\n\t\t\t                        builder.connectTimeout :\n\t\t\t                        getConnectTimeoutFromConfig();\n\t\t\t        this.userAgent \u003d builder.userAgent;\n\t\t\t    }\n\n    public Priority getPriority() {\n\t\t\t        return priority;\n\t\t\t    }\n\n    public void setPriority(Priority priority) {\n\t\t\t        this.priority \u003d priority;\n\t\t\t    }\n\n    public Object getTag() {\n\t\t\t        return tag;\n\t\t\t    }\n\n    public void setTag(Object tag) {\n\t\t\t        this.tag \u003d tag;\n\t\t\t    }\n\n    public String getUrl() {\n\t\t\t        return url;\n\t\t\t    }\n\n    public void setUrl(String url) {\n\t\t\t        this.url \u003d url;\n\t\t\t    }\n\n    public String getDirPath() {\n\t\t\t        return dirPath;\n\t\t\t    }\n\n    public void setDirPath(String dirPath) {\n\t\t\t        this.dirPath \u003d dirPath;\n\t\t\t    }\n\n    public String getFileName() {\n\t\t\t        return fileName;\n\t\t\t    }\n\n    public void setFileName(String fileName) {\n\t\t\t        this.fileName \u003d fileName;\n\t\t\t    }\n\n    public int getSequenceNumber() {\n\t\t\t        return sequenceNumber;\n\t\t\t    }\n\n    public void setSequenceNumber(int sequenceNumber) {\n\t\t\t        this.sequenceNumber \u003d sequenceNumber;\n\t\t\t    }\n\n    public HashMap\u003cString, List\u003cString\u003e\u003e getHeaders() {\n\t\t\t        return headerMap;\n\t\t\t    }\n\n    public java.util.concurrent.Future getFuture() {\n\t\t\t        return future;\n\t\t\t    }\n\n    public void setFuture(java.util.concurrent.Future future) {\n\t\t\t        this.future \u003d future;\n\t\t\t    }\n\n    public long getDownloadedBytes() {\n\t\t\t        return downloadedBytes;\n\t\t\t    }\n\n    public void setDownloadedBytes(long downloadedBytes) {\n\t\t\t        this.downloadedBytes \u003d downloadedBytes;\n\t\t\t    }\n\n    public long getTotalBytes() {\n\t\t\t        return totalBytes;\n\t\t\t    }\n\n    public void setTotalBytes(long totalBytes) {\n\t\t\t        this.totalBytes \u003d totalBytes;\n\t\t\t    }\n\n    public int getReadTimeout() {\n\t\t\t        return readTimeout;\n\t\t\t    }\n\n    public void setReadTimeout(int readTimeout) {\n\t\t\t        this.readTimeout \u003d readTimeout;\n\t\t\t    }\n\n    public int getConnectTimeout() {\n\t\t\t        return connectTimeout;\n\t\t\t    }\n\n    public void setConnectTimeout(int connectTimeout) {\n\t\t\t        this.connectTimeout \u003d connectTimeout;\n\t\t\t    }\n\n    public String getUserAgent() {\n\t\t\t        if (userAgent \u003d\u003d null) {\n\t\t\t\t\t\t            userAgent \u003d ComponentHolder.getInstance().getUserAgent();\n\t\t\t\t\t\t        }\n\t\t\t        return userAgent;\n\t\t\t    }\n\n    public void setUserAgent(String userAgent) {\n\t\t\t        this.userAgent \u003d userAgent;\n\t\t\t    }\n\n    public int getDownloadId() {\n\t\t\t        return downloadId;\n\t\t\t    }\n\n    public void setDownloadId(int downloadId) {\n\t\t\t        this.downloadId \u003d downloadId;\n\t\t\t    }\n\n    public Status getStatus() {\n\t\t\t        return status;\n\t\t\t    }\n\n    public void setStatus(Status status) {\n\t\t\t        this.status \u003d status;\n\t\t\t    }\n\n    public OnProgressListener getOnProgressListener() {\n\t\t\t        return onProgressListener;\n\t\t\t    }\n\n    public DownloadRequest setOnStartOrResumeListener(OnStartOrResumeListener onStartOrResumeListener) {\n\t\t\t        this.onStartOrResumeListener \u003d onStartOrResumeListener;\n\t\t\t        return this;\n\t\t\t    }\n\n    public DownloadRequest setOnProgressListener(OnProgressListener onProgressListener) {\n\t\t\t        this.onProgressListener \u003d onProgressListener;\n\t\t\t        return this;\n\t\t\t    }\n\n    public DownloadRequest setOnPauseListener(OnPauseListener onPauseListener) {\n\t\t\t        this.onPauseListener \u003d onPauseListener;\n\t\t\t        return this;\n\t\t\t    }\n\n    public DownloadRequest setOnCancelListener(OnCancelListener onCancelListener) {\n\t\t\t        this.onCancelListener \u003d onCancelListener;\n\t\t\t        return this;\n\t\t\t    }\n\n    public int start(OnDownloadListener onDownloadListener) {\n\t\t\t        this.onDownloadListener \u003d onDownloadListener;\n\t\t\t        downloadId \u003d Utils.getUniqueId(url, dirPath, fileName);\n\t\t\t        DownloadRequestQueue.getInstance().addRequest(this);\n\t\t\t        return downloadId;\n\t\t\t    }\n\n    public Response executeSync() {\n\t\t\t        downloadId \u003d Utils.getUniqueId(url, dirPath, fileName);\n\t\t\t        return new SynchronousCall(this).execute();\n\t\t\t    }\n\n    public void deliverError(final Error error) {\n\t\t\t        if (status !\u003d Status.CANCELLED) {\n\t\t\t\t\t\t            Core.getInstance().getExecutorSupplier().forMainThreadTasks()\n\t\t\t\t\t\t                    .execute(new Runnable() {\n\t\t\t\t\t\t\t\t\t                        public void run() {\n\t\t\t\t\t\t\t\t\t\t\t\t                            if (onDownloadListener !\u003d null) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t                                onDownloadListener.onError(error);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t                            }\n\t\t\t\t\t\t\t\t\t\t\t\t                            finish();\n\t\t\t\t\t\t\t\t\t\t\t\t                        }\n\t\t\t\t\t\t\t\t\t                    });\n\t\t\t\t\t\t        }\n\t\t\t    }\n\n    public void deliverSuccess() {\n\t\t\t        if (status !\u003d Status.CANCELLED) {\n\t\t\t\t\t\t            setStatus(Status.COMPLETED);\n\t\t\t\t\t\t            Core.getInstance().getExecutorSupplier().forMainThreadTasks()\n\t\t\t\t\t\t                    .execute(new Runnable() {\n\t\t\t\t\t\t\t\t\t                        public void run() {\n\t\t\t\t\t\t\t\t\t\t\t\t                            if (onDownloadListener !\u003d null) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t                                onDownloadListener.onDownloadComplete();\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t                            }\n\t\t\t\t\t\t\t\t\t\t\t\t                            finish();\n\t\t\t\t\t\t\t\t\t\t\t\t                        }\n\t\t\t\t\t\t\t\t\t                    });\n\t\t\t\t\t\t        }\n\t\t\t    }\n\n    public void deliverStartEvent() {\n\t\t\t        if (status !\u003d Status.CANCELLED) {\n\t\t\t\t\t\t            Core.getInstance().getExecutorSupplier().forMainThreadTasks()\n\t\t\t\t\t\t                    .execute(new Runnable() {\n\t\t\t\t\t\t\t\t\t                        public void run() {\n\t\t\t\t\t\t\t\t\t\t\t\t                            if (onStartOrResumeListener !\u003d null) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t                                onStartOrResumeListener.onStartOrResume();\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t                            }\n\t\t\t\t\t\t\t\t\t\t\t\t                        }\n\t\t\t\t\t\t\t\t\t                    });\n\t\t\t\t\t\t        }\n\t\t\t    }\n\n    public void deliverPauseEvent() {\n\t\t\t        if (status !\u003d Status.CANCELLED) {\n\t\t\t\t\t\t            Core.getInstance().getExecutorSupplier().forMainThreadTasks()\n\t\t\t\t\t\t                    .execute(new Runnable() {\n\t\t\t\t\t\t\t\t\t                        public void run() {\n\t\t\t\t\t\t\t\t\t\t\t\t                            if (onPauseListener !\u003d null) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t                                onPauseListener.onPause();\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t                            }\n\t\t\t\t\t\t\t\t\t\t\t\t                        }\n\t\t\t\t\t\t\t\t\t                    });\n\t\t\t\t\t\t        }\n\t\t\t    }\n\n    private void deliverCancelEvent() {\n\t\t\t        Core.getInstance().getExecutorSupplier().forMainThreadTasks()\n\t\t\t                .execute(new Runnable() {\n\t\t\t\t\t\t                    public void run() {\n\t\t\t\t\t\t\t\t\t                        if (onCancelListener !\u003d null) {\n\t\t\t\t\t\t\t\t\t\t\t\t                            onCancelListener.onCancel();\n\t\t\t\t\t\t\t\t\t\t\t\t                        }\n\t\t\t\t\t\t\t\t\t                    }\n\t\t\t\t\t\t                });\n\t\t\t    }\n\n    public void cancel() {\n\t\t\t        status \u003d Status.CANCELLED;\n\t\t\t        if (future !\u003d null) {\n\t\t\t\t\t\t            future.cancel(true);\n\t\t\t\t\t\t        }\n\t\t\t        deliverCancelEvent();\n\t\t\t        Utils.deleteTempFileAndDatabaseEntryInBackground(Utils.getTempPath(dirPath, fileName), downloadId);\n\t\t\t    }\n\n    private void finish() {\n\t\t\t        destroy();\n\t\t\t        DownloadRequestQueue.getInstance().finish(this);\n\t\t\t    }\n\n    private void destroy() {\n\t\t\t        this.onProgressListener \u003d null;\n\t\t\t        this.onDownloadListener \u003d null;\n\t\t\t        this.onStartOrResumeListener \u003d null;\n\t\t\t        this.onPauseListener \u003d null;\n\t\t\t        this.onCancelListener \u003d null;\n\t\t\t    }\n\n    private int getReadTimeoutFromConfig() {\n\t\t\t        return ComponentHolder.getInstance().getReadTimeout();\n\t\t\t    }\n\n    private int getConnectTimeoutFromConfig() {\n\t\t\t        return ComponentHolder.getInstance().getConnectTimeout();\n\t\t\t    }\n\n}\n\npublic static class DownloadRequestBuilder implements RequestBuilder {\n    String url;\n    String dirPath;\n    String fileName;\n    Priority priority \u003d Priority.MEDIUM;\n    Object tag;\n    int readTimeout;\n    int connectTimeout;\n    String userAgent;\n    HashMap\u003cString, List\u003cString\u003e\u003e headerMap;\n    public DownloadRequestBuilder(String url, String dirPath, String fileName) {\n\t\t\t        this.url \u003d url;\n\t\t\t        this.dirPath \u003d dirPath;\n\t\t\t        this.fileName \u003d fileName;\n\t\t\t    }\n    @Override\n    public DownloadRequestBuilder setHeader(String name, String value) {\n\t\t\t        if (headerMap \u003d\u003d null) {\n\t\t\t\t\t\t            headerMap \u003d new HashMap\u003c\u003e();\n\t\t\t\t\t\t        }\n\t\t\t        List\u003cString\u003e list \u003d headerMap.get(name);\n\t\t\t        if (list \u003d\u003d null) {\n\t\t\t\t\t\t            list \u003d new ArrayList\u003c\u003e();\n\t\t\t\t\t\t            headerMap.put(name, list);\n\t\t\t\t\t\t        }\n\t\t\t        if (!list.contains(value)) {\n\t\t\t\t\t\t            list.add(value);\n\t\t\t\t\t\t        }\n\t\t\t        return this;\n\t\t\t    }\n    @Override\n    public DownloadRequestBuilder setPriority(Priority priority) {\n\t\t\t        this.priority \u003d priority;\n\t\t\t        return this;\n\t\t\t    }\n    @Override\n    public DownloadRequestBuilder setTag(Object tag) {\n\t\t\t        this.tag \u003d tag;\n\t\t\t        return this;\n\t\t\t    }\n    @Override\n    public DownloadRequestBuilder setReadTimeout(int readTimeout) {\n\t\t\t        this.readTimeout \u003d readTimeout;\n\t\t\t        return this;\n\t\t\t    }\n    @Override\n    public DownloadRequestBuilder setConnectTimeout(int connectTimeout) {\n\t\t\t        this.connectTimeout \u003d connectTimeout;\n\t\t\t        return this;\n\t\t\t    }\n    @Override\n    public DownloadRequestBuilder setUserAgent(String userAgent) {\n\t\t\t        this.userAgent \u003d userAgent;\n\t\t\t        return this;\n\t\t\t    }\n    public DownloadRequest build() {\n\t\t\t        return new DownloadRequest(this);\n\t\t\t    }\n}\n\npublic static interface RequestBuilder {\n    RequestBuilder setHeader(String name, String value);\n    RequestBuilder setPriority(Priority priority);\n    RequestBuilder setTag(Object tag);\n    RequestBuilder setReadTimeout(int readTimeout);\n    RequestBuilder setConnectTimeout(int connectTimeout);\n    RequestBuilder setUserAgent(String userAgent);\n}\n\npublic static final class Utils {\n    private final static int MAX_REDIRECTION \u003d 10;\n    private Utils() {\n\t\t\t    }\n    public static String getPath(String dirPath, String fileName) {\n\t\t\t        return dirPath + java.io.File.separator + fileName;\n\t\t\t    }\n    public static String getTempPath(String dirPath, String fileName) {\n\t\t\t        return getPath(dirPath, fileName) + \".temp\";\n\t\t\t    }\n    public static void renameFileName(String oldPath, String newPath) throws java.io.IOException {\n\t\t\t        final java.io.File oldFile \u003d new java.io.File(oldPath);\n\t\t\t        try {\n\t\t\t\t\t\t            final java.io.File newFile \u003d new java.io.File(newPath);\n\t\t\t\t\t\t            if (newFile.exists()) {\n\t\t\t\t\t\t\t\t\t                if (!newFile.delete()) {\n\t\t\t\t\t\t\t\t\t\t\t\t                    throw new java.io.IOException(\"Deletion Failed\");\n\t\t\t\t\t\t\t\t\t\t\t\t                }\n\t\t\t\t\t\t\t\t\t            }\n\t\t\t\t\t\t            if (!oldFile.renameTo(newFile)) {\n\t\t\t\t\t\t\t\t\t                throw new java.io.IOException(\"Rename Failed\");\n\t\t\t\t\t\t\t\t\t            }\n\t\t\t\t\t\t        } finally {\n\t\t\t\t\t\t            if (oldFile.exists()) {\n\t\t\t\t\t\t\t\t\t                oldFile.delete();\n\t\t\t\t\t\t\t\t\t            }\n\t\t\t\t\t\t        }\n\t\t\t    }\n\n    public static void deleteTempFileAndDatabaseEntryInBackground(final String path, final int downloadId) {\n\t\t\t        Core.getInstance().getExecutorSupplier().forBackgroundTasks()\n\t\t\t                .execute(new Runnable() {\n\t\t\t\t\t\t                    @Override\n\t\t\t\t\t\t                    public void run() {\n\t\t\t\t\t\t\t\t\t                        ComponentHolder.getInstance().getDbHelper().remove(downloadId);\n\t\t\t\t\t\t\t\t\t                        java.io.File file \u003d new java.io.File(path);\n\t\t\t\t\t\t\t\t\t                        if (file.exists()) {\n\t\t\t\t\t\t\t\t\t\t\t\t                            //noinspection ResultOfMethodCallIgnored\n\t\t\t\t\t\t\t\t\t\t\t\t                            file.delete();\n\t\t\t\t\t\t\t\t\t\t\t\t                        }\n\t\t\t\t\t\t\t\t\t                    }\n\t\t\t\t\t\t                });\n\t\t\t    }\n\n    public static void deleteUnwantedModelsAndTempFiles(final int days) {\n\t\t\t        Core.getInstance().getExecutorSupplier().forBackgroundTasks()\n\t\t\t                .execute(new Runnable() {\n\t\t\t\t\t\t                    @Override\n\t\t\t\t\t\t                    public void run() {\n\t\t\t\t\t\t\t\t\t                        List\u003cDownloadModel\u003e models \u003d ComponentHolder.getInstance()\n\t\t\t\t\t\t\t\t\t                                .getDbHelper()\n\t\t\t\t\t\t\t\t\t                                .getUnwantedModels(days);\n\t\t\t\t\t\t\t\t\t                        if (models !\u003d null) {\n\t\t\t\t\t\t\t\t\t\t\t\t                            for (DownloadModel model : models) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t                                final String tempPath \u003d getTempPath(model.getDirPath(), model.getFileName());\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t                                ComponentHolder.getInstance().getDbHelper().remove(model.getId());\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t                                java.io.File file \u003d new java.io.File(tempPath);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t                                if (file.exists()) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t                                    file.delete();\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t                                }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t                            }\n\t\t\t\t\t\t\t\t\t\t\t\t                        }\n\t\t\t\t\t\t\t\t\t                    }\n\t\t\t\t\t\t                });\n\t\t\t    }\n\n    public static int getUniqueId(String url, String dirPath, String fileName) {\n\t\t\t        String string \u003d url + java.io.File.separator + dirPath + java.io.File.separator + fileName;\n\t\t\t        byte[] hash;\n\t\t\t        try {\n\t\t\t\t\t\t            hash \u003d java.security.MessageDigest.getInstance(\"MD5\").digest(string.getBytes(\"UTF-8\"));\n\t\t\t\t\t\t        } catch (java.security.NoSuchAlgorithmException e) {\n\t\t\t\t\t\t            throw new RuntimeException(\"NoSuchAlgorithmException\", e);\n\t\t\t\t\t\t        } catch (java.io.UnsupportedEncodingException e) {\n\t\t\t\t\t\t            throw new RuntimeException(\"UnsupportedEncodingException\", e);\n\t\t\t\t\t\t        }\n\t\t\t        StringBuilder hex \u003d new StringBuilder(hash.length * 2);\n\t\t\t\n\t\t\t        for (byte b : hash) {\n\t\t\t\t\t\t            if ((b \u0026 0xFF) \u003c 0x10) hex.append(\"0\");\n\t\t\t\t\t\t            hex.append(Integer.toHexString(b \u0026 0xFF));\n\t\t\t\t\t\t        }\n\t\t\t        return hex.toString().hashCode();\n\t\t\t\n\t\t\t    }\n    public static HttpClient getRedirectedConnectionIfAny(HttpClient httpClient,\n                                                          DownloadRequest request)\n            throws java.io.IOException, IllegalAccessException {\n\t\t\t        int redirectTimes \u003d 0;\n\t\t\t        int code \u003d httpClient.getResponseCode();\n\t\t\t        String location \u003d httpClient.getResponseHeader(\"Location\");\n\t\t\t        while (isRedirection(code)) {\n\t\t\t\t\t\t            if (location \u003d\u003d null) {\n\t\t\t\t\t\t\t\t\t                throw new IllegalAccessException(\"Location is null\");\n\t\t\t\t\t\t\t\t\t            }\n\t\t\t\t\t\t            httpClient.close();\n\t\t\t\t\t\t            request.setUrl(location);\n\t\t\t\t\t\t            httpClient \u003d ComponentHolder.getInstance().getHttpClient();\n\t\t\t\t\t\t            httpClient.connect(request);\n\t\t\t\t\t\t            code \u003d httpClient.getResponseCode();\n\t\t\t\t\t\t            location \u003d httpClient.getResponseHeader(\"Location\");\n\t\t\t\t\t\t            redirectTimes++;\n\t\t\t\t\t\t            if (redirectTimes \u003e\u003d MAX_REDIRECTION) {\n\t\t\t\t\t\t\t\t\t                throw new IllegalAccessException(\"Max redirection done\");\n\t\t\t\t\t\t\t\t\t            }\n\t\t\t\t\t\t        }\n\t\t\t        return httpClient;\n\t\t\t    }\n    private static boolean isRedirection(int code) {\n\t\t\t        return code \u003d\u003d java.net.HttpURLConnection.HTTP_MOVED_PERM\n\t\t\t                || code \u003d\u003d java.net.HttpURLConnection.HTTP_MOVED_TEMP\n\t\t\t                || code \u003d\u003d java.net.HttpURLConnection.HTTP_SEE_OTHER\n\t\t\t                || code \u003d\u003d java.net.HttpURLConnection.HTTP_MULT_CHOICE\n\t\t\t                || code \u003d\u003d Constants.HTTP_TEMPORARY_REDIRECT\n\t\t\t                || code \u003d\u003d Constants.HTTP_PERMANENT_REDIRECT;\n\t\t\t    }\n}\n\n\npublic static class Core {\n    private static Core instance \u003d null;\n    private final ExecutorSupplier executorSupplier;\n    private Core() {\n\t\t\t        this.executorSupplier \u003d new DefaultExecutorSupplier();\n\t\t\t    }\n    public static Core getInstance() {\n\t\t\t        if (instance \u003d\u003d null) {\n\t\t\t\t\t\t            synchronized (Core.class) {\n\t\t\t\t\t\t\t\t\t                if (instance \u003d\u003d null) {\n\t\t\t\t\t\t\t\t\t\t\t\t                    instance \u003d new Core();\n\t\t\t\t\t\t\t\t\t\t\t\t                }\n\t\t\t\t\t\t\t\t\t            }\n\t\t\t\t\t\t        }\n\t\t\t        return instance;\n\t\t\t    }\n    public ExecutorSupplier getExecutorSupplier() {\n\t\t\t        return executorSupplier;\n\t\t\t    }\n    public static void shutDown() {\n\t\t\t        if (instance !\u003d null) {\n\t\t\t\t\t\t            instance \u003d null;\n\t\t\t\t\t\t        }\n\t\t\t    }\n}\n\n\npublic static class PriorityThreadFactory implements java.util.concurrent.ThreadFactory {\n    private final int mThreadPriority;\n    PriorityThreadFactory(int threadPriority) {\n\t\t\t        mThreadPriority \u003d threadPriority;\n\t\t\t    }\n    @Override\n    public Thread newThread(final Runnable runnable) {\n\t\t\t        Runnable wrapperRunnable \u003d new Runnable() {\n\t\t\t\t\t\t            @Override\n\t\t\t\t\t\t            public void run() {\n\t\t\t\t\t\t\t\t\t                try {\n\t\t\t\t\t\t\t\t\t\t\t\t                    android.os.Process.setThreadPriority(mThreadPriority);\n\t\t\t\t\t\t\t\t\t\t\t\t                } catch (Throwable ignored) {\n\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t                }\n\t\t\t\t\t\t\t\t\t                runnable.run();\n\t\t\t\t\t\t\t\t\t            }\n\t\t\t\t\t\t        };\n\t\t\t        return new Thread(wrapperRunnable);\n\t\t\t    }\n}\npublic static class MainThreadExecutor implements java.util.concurrent.Executor {\n    private final Handler handler \u003d new Handler(Looper.getMainLooper());\n    @Override\n    public void execute(Runnable runnable) {\n\t\t\t        handler.post(runnable);\n\t\t\t    }\n}\n\npublic static class DefaultExecutorSupplier implements ExecutorSupplier {\n    private static final int DEFAULT_MAX_NUM_THREADS \u003d 2 * Runtime.getRuntime().availableProcessors() + 1;\n    private final DownloadExecutor networkExecutor;\n    private final java.util.concurrent.Executor backgroundExecutor;\n    private final java.util.concurrent.Executor mainThreadExecutor;\n    DefaultExecutorSupplier() {\n\t\t\t        java.util.concurrent.ThreadFactory backgroundPriorityThreadFactory \u003d new PriorityThreadFactory(android.os.Process.THREAD_PRIORITY_BACKGROUND);\n\t\t\t        networkExecutor \u003d new DownloadExecutor(DEFAULT_MAX_NUM_THREADS, backgroundPriorityThreadFactory);\n\t\t\t        backgroundExecutor \u003d java.util.concurrent.Executors.newSingleThreadExecutor();\n\t\t\t        mainThreadExecutor \u003d new MainThreadExecutor();\n\t\t\t    }\n    @Override\n    public DownloadExecutor forDownloadTasks() {\n\t\t\t        return networkExecutor;\n\t\t\t    }\n    @Override\n    public java.util.concurrent.Executor forBackgroundTasks() {\n\t\t\t        return backgroundExecutor;\n\t\t\t    }\n    @Override\n    public java.util.concurrent.Executor forMainThreadTasks() {\n\t\t\t        return mainThreadExecutor;\n\t\t\t    }\n}\n\npublic static interface ExecutorSupplier {\n    DownloadExecutor forDownloadTasks();\n    java.util.concurrent.Executor forBackgroundTasks();\n    java.util.concurrent.Executor forMainThreadTasks();\n}\n\n\npublic static class FileDownloadRandomAccessFile implements FileDownloadOutputStream {\n    private final java.io.BufferedOutputStream out;\n    private final java.io.FileDescriptor fd;\n    private final java.io.RandomAccessFile randomAccess;\n    private FileDownloadRandomAccessFile(java.io.File file) throws java.io.IOException {\n\t\t\t        randomAccess \u003d new java.io.RandomAccessFile(file, \"rw\");\n\t\t\t        fd \u003d randomAccess.getFD();\n\t\t\t        out \u003d new java.io.BufferedOutputStream(new java.io.FileOutputStream(randomAccess.getFD()));\n\t\t\t    }\n    @Override\n    public void write(byte[] b, int off, int len) throws java.io.IOException {\n\t\t\t        out.write(b, off, len);\n\t\t\t    }\n    @Override\n    public void flushAndSync() throws java.io.IOException {\n\t\t\t        out.flush();\n\t\t\t        fd.sync();\n\t\t\t    }\n    @Override\n    public void close() throws java.io.IOException {\n\t\t\t        out.close();\n\t\t\t        randomAccess.close();\n\t\t\t    }\n    @Override\n    public void seek(long offset) throws java.io.IOException {\n\t\t\t        randomAccess.seek(offset);\n\t\t\t    }\n    @Override\n    public void setLength(long totalBytes) throws java.io.IOException {\n\t\t\t        randomAccess.setLength(totalBytes);\n\t\t\t    }\n    public static FileDownloadOutputStream create(java.io.File file) throws java.io.IOException {\n\t\t\t        return new FileDownloadRandomAccessFile(file);\n\t\t\t    }\n}\n\npublic static interface FileDownloadOutputStream {\n    void write(byte b[], int off, int len) throws java.io.IOException;\n    void flushAndSync() throws java.io.IOException;\n    void close() throws java.io.IOException;\n    void seek(long offset) throws java.io.IOException, IllegalAccessException;\n    void setLength(final long newLength) throws java.io.IOException, IllegalAccessException;\n}\npublic static class DownloadRunnable implements Runnable {\n    public final Priority priority;\n    public final int sequence;\n    public final DownloadRequest request;\n    DownloadRunnable(DownloadRequest request) {\n\t\t\t        this.request \u003d request;\n\t\t\t        this.priority \u003d request.getPriority();\n\t\t\t        this.sequence \u003d request.getSequenceNumber();\n\t\t\t    }\n    @Override\n    public void run() {\n\t\t\t        request.setStatus(Status.RUNNING);\n\t\t\t        DownloadTask downloadTask \u003d DownloadTask.create(request);\n\t\t\t        Response response \u003d downloadTask.run();\n\t\t\t        if (response.isSuccessful()) {\n\t\t\t\t\t\t            request.deliverSuccess();\n\t\t\t\t\t\t        } else if (response.isPaused()) {\n\t\t\t\t\t\t            request.deliverPauseEvent();\n\t\t\t\t\t\t        } else if (response.getError() !\u003d null) {\n\t\t\t\t\t\t            request.deliverError(response.getError());\n\t\t\t\t\t\t        } else if (!response.isCancelled()) {\n\t\t\t\t\t\t            request.deliverError(new Error());\n\t\t\t\t\t\t        }\n\t\t\t    }\n}\n\n\npublic static class SynchronousCall {\n    public final DownloadRequest request;\n    public SynchronousCall(DownloadRequest request) {\n\t\t\t        this.request \u003d request;\n\t\t\t    }\n    public Response execute() {\n\t\t\t        DownloadTask downloadTask \u003d DownloadTask.create(request);\n\t\t\t        return downloadTask.run();\n\t\t\t    }\n}\n\npublic static class ComponentHolder {\n    private final static ComponentHolder INSTANCE \u003d new ComponentHolder();\n    private int readTimeout;\n    private int connectTimeout;\n    private String userAgent;\n    private HttpClient httpClient;\n    private DbHelper dbHelper;\n    public static ComponentHolder getInstance() {\n\t\t\t        return INSTANCE;\n\t\t\t    }\n    public void init(Context context, PRDownloaderConfig config) {\n\t\t\t        this.readTimeout \u003d config.getReadTimeout();\n\t\t\t        this.connectTimeout \u003d config.getConnectTimeout();\n\t\t\t        this.userAgent \u003d config.getUserAgent();\n\t\t\t        this.httpClient \u003d config.getHttpClient();\n\t\t\t        this.dbHelper \u003d config.isDatabaseEnabled() ? new AppDbHelper(context) : new NoOpsDbHelper();\n\t\t\t        if (config.isDatabaseEnabled()) {\n\t\t\t\t\t\t            PRDownloader.cleanUp(30);\n\t\t\t\t\t\t        }\n\t\t\t    }\n    public int getReadTimeout() {\n\t\t\t        if (readTimeout \u003d\u003d 0) {\n\t\t\t\t\t\t            synchronized (ComponentHolder.class) {\n\t\t\t\t\t\t\t\t\t                if (readTimeout \u003d\u003d 0) {\n\t\t\t\t\t\t\t\t\t\t\t\t                    readTimeout \u003d Constants.DEFAULT_READ_TIMEOUT_IN_MILLS;\n\t\t\t\t\t\t\t\t\t\t\t\t                }\n\t\t\t\t\t\t\t\t\t            }\n\t\t\t\t\t\t        }\n\t\t\t        return readTimeout;\n\t\t\t    }\n    public int getConnectTimeout() {\n\t\t\t        if (connectTimeout \u003d\u003d 0) {\n\t\t\t\t\t\t            synchronized (ComponentHolder.class) {\n\t\t\t\t\t\t\t\t\t                if (connectTimeout \u003d\u003d 0) {\n\t\t\t\t\t\t\t\t\t\t\t\t                    connectTimeout \u003d Constants.DEFAULT_CONNECT_TIMEOUT_IN_MILLS;\n\t\t\t\t\t\t\t\t\t\t\t\t                }\n\t\t\t\t\t\t\t\t\t            }\n\t\t\t\t\t\t        }\n\t\t\t        return connectTimeout;\n\t\t\t    }\n    public String getUserAgent() {\n\t\t\t        if (userAgent \u003d\u003d null) {\n\t\t\t\t\t\t            synchronized (ComponentHolder.class) {\n\t\t\t\t\t\t\t\t\t                if (userAgent \u003d\u003d null) {\n\t\t\t\t\t\t\t\t\t\t\t\t                    userAgent \u003d Constants.DEFAULT_USER_AGENT;\n\t\t\t\t\t\t\t\t\t\t\t\t                }\n\t\t\t\t\t\t\t\t\t            }\n\t\t\t\t\t\t        }\n\t\t\t        return userAgent;\n\t\t\t    }\n    public DbHelper getDbHelper() {\n\t\t\t        if (dbHelper \u003d\u003d null) {\n\t\t\t\t\t\t            synchronized (ComponentHolder.class) {\n\t\t\t\t\t\t\t\t\t                if (dbHelper \u003d\u003d null) {\n\t\t\t\t\t\t\t\t\t\t\t\t                    dbHelper \u003d new NoOpsDbHelper();\n\t\t\t\t\t\t\t\t\t\t\t\t                }\n\t\t\t\t\t\t\t\t\t            }\n\t\t\t\t\t\t        }\n\t\t\t        return dbHelper;\n\t\t\t    }\n    public HttpClient getHttpClient() {\n\t\t\t        if (httpClient \u003d\u003d null) {\n\t\t\t\t\t\t            synchronized (ComponentHolder.class) {\n\t\t\t\t\t\t\t\t\t                if (httpClient \u003d\u003d null) {\n\t\t\t\t\t\t\t\t\t\t\t\t                    httpClient \u003d new DefaultHttpClient();\n\t\t\t\t\t\t\t\t\t\t\t\t                }\n\t\t\t\t\t\t\t\t\t            }\n\t\t\t\t\t\t        }\n\t\t\t        return httpClient.clone();\n\t\t\t    }\n}\n\n\npublic static class DownloadTask {\n    private static final int BUFFER_SIZE \u003d 1024 * 4;\n    private static final long TIME_GAP_FOR_SYNC \u003d 2000;\n    private static final long MIN_BYTES_FOR_SYNC \u003d 65536;\n    private final DownloadRequest request;\n    private ProgressHandler progressHandler;\n    private long lastSyncTime;\n    private long lastSyncBytes;\n    private java.io.InputStream inputStream;\n    private FileDownloadOutputStream outputStream;\n    private HttpClient httpClient;\n    private long totalBytes;\n    private int responseCode;\n    private String eTag;\n    private boolean isResumeSupported;\n    private String tempPath;\n    private DownloadTask(DownloadRequest request) {\n\t\t\t        this.request \u003d request;\n\t\t\t    }\n    static DownloadTask create(DownloadRequest request) {\n\t\t\t        return new DownloadTask(request);\n\t\t\t    }\n    Response run() {\n\t\t\t        Response response \u003d new Response();\n\t\t\t        if (request.getStatus() \u003d\u003d Status.CANCELLED) {\n\t\t\t\t\t\t            response.setCancelled(true);\n\t\t\t\t\t\t            return response;\n\t\t\t\t\t\t        } else if (request.getStatus() \u003d\u003d Status.PAUSED) {\n\t\t\t\t\t\t            response.setPaused(true);\n\t\t\t\t\t\t            return response;\n\t\t\t\t\t\t        }\n\t\t\t        try {\n\t\t\t\t\t\t            if (request.getOnProgressListener() !\u003d null) {\n\t\t\t\t\t\t\t\t\t                progressHandler \u003d new ProgressHandler(request.getOnProgressListener());\n\t\t\t\t\t\t\t\t\t            }\n\t\t\t\t\t\t            tempPath \u003d Utils.getTempPath(request.getDirPath(), request.getFileName());\n\t\t\t\t\t\t            java.io.File file \u003d new java.io.File(tempPath);\n\t\t\t\t\t\t            DownloadModel model \u003d getDownloadModelIfAlreadyPresentInDatabase();\n\t\t\t\t\t\t            if (model !\u003d null) {\n\t\t\t\t\t\t\t\t\t                if (file.exists()) {\n\t\t\t\t\t\t\t\t\t\t\t\t                    request.setTotalBytes(model.getTotalBytes());\n\t\t\t\t\t\t\t\t\t\t\t\t                    request.setDownloadedBytes(model.getDownloadedBytes());\n\t\t\t\t\t\t\t\t\t\t\t\t                } else {\n\t\t\t\t\t\t\t\t\t\t\t\t                    removeNoMoreNeededModelFromDatabase();\n\t\t\t\t\t\t\t\t\t\t\t\t                    request.setDownloadedBytes(0);\n\t\t\t\t\t\t\t\t\t\t\t\t                    request.setTotalBytes(0);\n\t\t\t\t\t\t\t\t\t\t\t\t                    model \u003d null;\n\t\t\t\t\t\t\t\t\t\t\t\t                }\n\t\t\t\t\t\t\t\t\t            }\n\t\t\t\t\t\t            httpClient \u003d ComponentHolder.getInstance().getHttpClient();\n\t\t\t\t\t\t            httpClient.connect(request);\n\t\t\t\t\t\t            if (request.getStatus() \u003d\u003d Status.CANCELLED) {\n\t\t\t\t\t\t\t\t\t                response.setCancelled(true);\n\t\t\t\t\t\t\t\t\t                return response;\n\t\t\t\t\t\t\t\t\t            } else if (request.getStatus() \u003d\u003d Status.PAUSED) {\n\t\t\t\t\t\t\t\t\t                response.setPaused(true);\n\t\t\t\t\t\t\t\t\t                return response;\n\t\t\t\t\t\t\t\t\t            }\n\t\t\t\t\t\t            httpClient \u003d Utils.getRedirectedConnectionIfAny(httpClient, request);\n\t\t\t\t\t\t            responseCode \u003d httpClient.getResponseCode();\n\t\t\t\t\t\t            eTag \u003d httpClient.getResponseHeader(Constants.ETAG);\n\t\t\t\t\t\t            if (checkIfFreshStartRequiredAndStart(model)) {\n\t\t\t\t\t\t\t\t\t                model \u003d null;\n\t\t\t\t\t\t\t\t\t            }\n\t\t\t\t\t\t            if (!isSuccessful()) {\n\t\t\t\t\t\t\t\t\t                Error error \u003d new Error();\n\t\t\t\t\t\t\t\t\t                error.setServerError(true);\n\t\t\t\t\t\t\t\t\t                response.setError(error);\n\t\t\t\t\t\t\t\t\t                return response;\n\t\t\t\t\t\t\t\t\t            }\n\t\t\t\t\t\t            setResumeSupportedOrNot();\n\t\t\t\t\t\t            totalBytes \u003d request.getTotalBytes();\n\t\t\t\t\t\t            if (!isResumeSupported) {\n\t\t\t\t\t\t\t\t\t                deleteTempFile();\n\t\t\t\t\t\t\t\t\t            }\n\t\t\t\t\t\t            if (totalBytes \u003d\u003d 0) {\n\t\t\t\t\t\t\t\t\t                totalBytes \u003d httpClient.getContentLength();\n\t\t\t\t\t\t\t\t\t                request.setTotalBytes(totalBytes);\n\t\t\t\t\t\t\t\t\t            }\n\t\t\t\t\t\t            if (isResumeSupported \u0026\u0026 model \u003d\u003d null) {\n\t\t\t\t\t\t\t\t\t                createAndInsertNewModel();\n\t\t\t\t\t\t\t\t\t            }\n\t\t\t\t\t\t            if (request.getStatus() \u003d\u003d Status.CANCELLED) {\n\t\t\t\t\t\t\t\t\t                response.setCancelled(true);\n\t\t\t\t\t\t\t\t\t                return response;\n\t\t\t\t\t\t\t\t\t            } else if (request.getStatus() \u003d\u003d Status.PAUSED) {\n\t\t\t\t\t\t\t\t\t                response.setPaused(true);\n\t\t\t\t\t\t\t\t\t                return response;\n\t\t\t\t\t\t\t\t\t            }\n\t\t\t\t\t\t            request.deliverStartEvent();\n\t\t\t\t\t\t            inputStream \u003d httpClient.getInputStream();\n\t\t\t\t\t\t            byte[] buff \u003d new byte[BUFFER_SIZE];\n\t\t\t\t\t\t            if (!file.exists()) {\n\t\t\t\t\t\t\t\t\t                if (file.getParentFile() !\u003d null \u0026\u0026 !file.getParentFile().exists()) {\n\t\t\t\t\t\t\t\t\t\t\t\t                    if (file.getParentFile().mkdirs()) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t                        file.createNewFile();\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t                    }\n\t\t\t\t\t\t\t\t\t\t\t\t                } else {\n\t\t\t\t\t\t\t\t\t\t\t\t                    file.createNewFile();\n\t\t\t\t\t\t\t\t\t\t\t\t                }\n\t\t\t\t\t\t\t\t\t            }\n\t\t\t\t\t\t            this.outputStream \u003d FileDownloadRandomAccessFile.create(file);\n\t\t\t\t\t\t            if (isResumeSupported \u0026\u0026 request.getDownloadedBytes() !\u003d 0) {\n\t\t\t\t\t\t\t\t\t                outputStream.seek(request.getDownloadedBytes());\n\t\t\t\t\t\t\t\t\t            }\n\t\t\t\t\t\t            if (request.getStatus() \u003d\u003d Status.CANCELLED) {\n\t\t\t\t\t\t\t\t\t                response.setCancelled(true);\n\t\t\t\t\t\t\t\t\t                return response;\n\t\t\t\t\t\t\t\t\t            } else if (request.getStatus() \u003d\u003d Status.PAUSED) {\n\t\t\t\t\t\t\t\t\t                response.setPaused(true);\n\t\t\t\t\t\t\t\t\t                return response;\n\t\t\t\t\t\t\t\t\t            }\n\t\t\t\t\t\t            do {\n\t\t\t\t\t\t\t\t\t                final int byteCount \u003d inputStream.read(buff, 0, BUFFER_SIZE);\n\t\t\t\t\t\t\t\t\t                if (byteCount \u003d\u003d -1) {\n\t\t\t\t\t\t\t\t\t\t\t\t                    break;\n\t\t\t\t\t\t\t\t\t\t\t\t                }\n\t\t\t\t\t\t\t\t\t                outputStream.write(buff, 0, byteCount);\n\t\t\t\t\t\t\t\t\t                request.setDownloadedBytes(request.getDownloadedBytes() + byteCount);\n\t\t\t\t\t\t\t\t\t                sendProgress();\n\t\t\t\t\t\t\t\t\t                syncIfRequired(outputStream);\n\t\t\t\t\t\t\t\t\t                if (request.getStatus() \u003d\u003d Status.CANCELLED) {\n\t\t\t\t\t\t\t\t\t\t\t\t                    response.setCancelled(true);\n\t\t\t\t\t\t\t\t\t\t\t\t                    return response;\n\t\t\t\t\t\t\t\t\t\t\t\t                } else if (request.getStatus() \u003d\u003d Status.PAUSED) {\n\t\t\t\t\t\t\t\t\t\t\t\t                    sync(outputStream);\n\t\t\t\t\t\t\t\t\t\t\t\t                    response.setPaused(true);\n\t\t\t\t\t\t\t\t\t\t\t\t                    return response;\n\t\t\t\t\t\t\t\t\t\t\t\t                }\n\t\t\t\t\t\t\t\t\t            } while (true);\n\t\t\t\t\t\t            final String path \u003d Utils.getPath(request.getDirPath(), request.getFileName());\n\t\t\t\t\t\t            Utils.renameFileName(tempPath, path);\n\t\t\t\t\t\t            response.setSuccessful(true);\n\t\t\t\t\t\t            if (isResumeSupported) {\n\t\t\t\t\t\t\t\t\t                removeNoMoreNeededModelFromDatabase();\n\t\t\t\t\t\t\t\t\t            }\n\t\t\t\t\t\t        } catch (java.io.IOException | IllegalAccessException e) {\n\t\t\t\t\t\t            if (!isResumeSupported) {\n\t\t\t\t\t\t\t\t\t                deleteTempFile();\n\t\t\t\t\t\t\t\t\t            }\n\t\t\t\t\t\t            Error error \u003d new Error();\n\t\t\t\t\t\t            error.setConnectionError(true);\n\t\t\t\t\t\t            response.setError(error);\n\t\t\t\t\t\t        } finally {\n\t\t\t\t\t\t            closeAllSafely(outputStream);\n\t\t\t\t\t\t        }\n\t\t\t        return response;\n\t\t\t    }\n    private void deleteTempFile() {\n\t\t\t        java.io.File file \u003d new java.io.File(tempPath);\n\t\t\t        if (file.exists()) {\n\t\t\t\t\t\t            file.delete();\n\t\t\t\t\t\t        }\n\t\t\t    }\n    private boolean isSuccessful() {\n\t\t\t        return responseCode \u003e\u003d java.net.HttpURLConnection.HTTP_OK\n\t\t\t                \u0026\u0026 responseCode \u003c java.net.HttpURLConnection.HTTP_MULT_CHOICE;\n\t\t\t    }\n    private void setResumeSupportedOrNot() {\n\t\t\t        isResumeSupported \u003d (responseCode \u003d\u003d java.net.HttpURLConnection.HTTP_PARTIAL);\n\t\t\t    }\n    private boolean checkIfFreshStartRequiredAndStart(DownloadModel model) throws java.io.IOException,\n            IllegalAccessException {\n\t\t\t        if (responseCode \u003d\u003d Constants.HTTP_RANGE_NOT_SATISFIABLE || isETagChanged(model)) {\n\t\t\t\t\t\t            if (model !\u003d null) {\n\t\t\t\t\t\t\t\t\t                removeNoMoreNeededModelFromDatabase();\n\t\t\t\t\t\t\t\t\t            }\n\t\t\t\t\t\t            deleteTempFile();\n\t\t\t\t\t\t            request.setDownloadedBytes(0);\n\t\t\t\t\t\t            request.setTotalBytes(0);\n\t\t\t\t\t\t            httpClient \u003d ComponentHolder.getInstance().getHttpClient();\n\t\t\t\t\t\t            httpClient.connect(request);\n\t\t\t\t\t\t            httpClient \u003d Utils.getRedirectedConnectionIfAny(httpClient, request);\n\t\t\t\t\t\t            responseCode \u003d httpClient.getResponseCode();\n\t\t\t\t\t\t            return true;\n\t\t\t\t\t\t        }\n\t\t\t        return false;\n\t\t\t    }\n    private boolean isETagChanged(DownloadModel model) {\n\t\t\t        return !(eTag \u003d\u003d null || model \u003d\u003d null || model.getETag() \u003d\u003d null)\n\t\t\t                \u0026\u0026 !model.getETag().equals(eTag);\n\t\t\t    }\n    private DownloadModel getDownloadModelIfAlreadyPresentInDatabase() {\n\t\t\t        return ComponentHolder.getInstance().getDbHelper().find(request.getDownloadId());\n\t\t\t    }\n    private void createAndInsertNewModel() {\n\t\t\t        DownloadModel model \u003d new DownloadModel();\n\t\t\t        model.setId(request.getDownloadId());\n\t\t\t        model.setUrl(request.getUrl());\n\t\t\t        model.setETag(eTag);\n\t\t\t        model.setDirPath(request.getDirPath());\n\t\t\t        model.setFileName(request.getFileName());\n\t\t\t        model.setDownloadedBytes(request.getDownloadedBytes());\n\t\t\t        model.setTotalBytes(totalBytes);\n\t\t\t        model.setLastModifiedAt(System.currentTimeMillis());\n\t\t\t        ComponentHolder.getInstance().getDbHelper().insert(model);\n\t\t\t    }\n    private void removeNoMoreNeededModelFromDatabase() {\n\t\t\t        ComponentHolder.getInstance().getDbHelper().remove(request.getDownloadId());\n\t\t\t    }\n    private void sendProgress() {\n\t\t\t        if (request.getStatus() !\u003d Status.CANCELLED) {\n\t\t\t\t\t\t            if (progressHandler !\u003d null) {\n\t\t\t\t\t\t\t\t\t                progressHandler\n\t\t\t\t\t\t\t\t\t                        .obtainMessage(Constants.UPDATE,\n\t\t\t\t\t\t\t\t\t                                new Progress(request.getDownloadedBytes(),\n\t\t\t\t\t\t\t\t\t                                        totalBytes)).sendToTarget();\n\t\t\t\t\t\t\t\t\t            }\n\t\t\t\t\t\t        }\n\t\t\t    }\n    private void syncIfRequired(FileDownloadOutputStream outputStream) {\n\t\t\t        final long currentBytes \u003d request.getDownloadedBytes();\n\t\t\t        final long currentTime \u003d System.currentTimeMillis();\n\t\t\t        final long bytesDelta \u003d currentBytes - lastSyncBytes;\n\t\t\t        final long timeDelta \u003d currentTime - lastSyncTime;\n\t\t\t        if (bytesDelta \u003e MIN_BYTES_FOR_SYNC \u0026\u0026 timeDelta \u003e TIME_GAP_FOR_SYNC) {\n\t\t\t\t\t\t            sync(outputStream);\n\t\t\t\t\t\t            lastSyncBytes \u003d currentBytes;\n\t\t\t\t\t\t            lastSyncTime \u003d currentTime;\n\t\t\t\t\t\t        }\n\t\t\t    }\n    private void sync(FileDownloadOutputStream outputStream) {\n\t\t\t        boolean success;\n\t\t\t        try {\n\t\t\t\t\t\t            outputStream.flushAndSync();\n\t\t\t\t\t\t            success \u003d true;\n\t\t\t\t\t\t        } catch (java.io.IOException e) {\n\t\t\t\t\t\t            success \u003d false;\n\t\t\t\t\t\t            e.printStackTrace();\n\t\t\t\t\t\t        }\n\t\t\t        if (success \u0026\u0026 isResumeSupported) {\n\t\t\t\t\t\t            ComponentHolder.getInstance().getDbHelper()\n\t\t\t\t\t\t                    .updateProgress(request.getDownloadId(),\n\t\t\t\t\t\t                            request.getDownloadedBytes(),\n\t\t\t\t\t\t                            System.currentTimeMillis());\n\t\t\t\t\t\t        }\n\t\t\t    }\n    private void closeAllSafely(FileDownloadOutputStream outputStream) {\n\t\t\t        if (httpClient !\u003d null) {\n\t\t\t\t\t\t            try {\n\t\t\t\t\t\t\t\t\t                httpClient.close();\n\t\t\t\t\t\t\t\t\t            } catch (Exception e) {\n\t\t\t\t\t\t\t\t\t                e.printStackTrace();\n\t\t\t\t\t\t\t\t\t            }\n\t\t\t\t\t\t        }\n\t\t\t        if (inputStream !\u003d null) {\n\t\t\t\t\t\t            try {\n\t\t\t\t\t\t\t\t\t                inputStream.close();\n\t\t\t\t\t\t\t\t\t            } catch (java.io.IOException e) {\n\t\t\t\t\t\t\t\t\t                e.printStackTrace();\n\t\t\t\t\t\t\t\t\t            }\n\t\t\t\t\t\t        }\n\t\t\t        try {\n\t\t\t\t\t\t            if (outputStream !\u003d null) {\n\t\t\t\t\t\t\t\t\t                try {\n\t\t\t\t\t\t\t\t\t\t\t\t                    sync(outputStream);\n\t\t\t\t\t\t\t\t\t\t\t\t                } catch (Exception e) {\n\t\t\t\t\t\t\t\t\t\t\t\t                    e.printStackTrace();\n\t\t\t\t\t\t\t\t\t\t\t\t                }\n\t\t\t\t\t\t\t\t\t            }\n\t\t\t\t\t\t\n\t\t\t\t\t\t        } finally {\n\t\t\t\t\t\t            if (outputStream !\u003d null)\n\t\t\t\t\t\t                try {\n\t\t\t\t\t\t\t\t\t                    outputStream.close();\n\t\t\t\t\t\t\t\t\t                } catch (java.io.IOException e) {\n\t\t\t\t\t\t\t\t\t                    e.printStackTrace();\n\t\t\t\t\t\t\t\t\t                }\n\t\t\t\t\t\t        }\n\t\t\t    }\n}\n\n\npublic static class DownloadRequestQueue {\n    private static DownloadRequestQueue instance;\n    private final Map\u003cInteger, DownloadRequest\u003e currentRequestMap;\n    private final java.util.concurrent.atomic.AtomicInteger sequenceGenerator;\n    private DownloadRequestQueue() {\n\t\t\t        currentRequestMap \u003d new java.util.concurrent.ConcurrentHashMap\u003c\u003e();\n\t\t\t        sequenceGenerator \u003d new java.util.concurrent.atomic.AtomicInteger();\n\t\t\t    }\n    public static void initialize() {\n\t\t\t        getInstance();\n\t\t\t    }\n    public static DownloadRequestQueue getInstance() {\n\t\t\t        if (instance \u003d\u003d null) {\n\t\t\t\t\t\t            synchronized (DownloadRequestQueue.class) {\n\t\t\t\t\t\t\t\t\t                if (instance \u003d\u003d null) {\n\t\t\t\t\t\t\t\t\t\t\t\t                    instance \u003d new DownloadRequestQueue();\n\t\t\t\t\t\t\t\t\t\t\t\t                }\n\t\t\t\t\t\t\t\t\t            }\n\t\t\t\t\t\t        }\n\t\t\t        return instance;\n\t\t\t    }\n    private int getSequenceNumber() {\n\t\t\t        return sequenceGenerator.incrementAndGet();\n\t\t\t    }\n    public void pause(int downloadId) {\n\t\t\t        DownloadRequest request \u003d currentRequestMap.get(downloadId);\n\t\t\t        if (request !\u003d null) {\n\t\t\t\t\t\t            request.setStatus(Status.PAUSED);\n\t\t\t\t\t\t        }\n\t\t\t    }\n    public void resume(int downloadId) {\n\t\t\t        DownloadRequest request \u003d currentRequestMap.get(downloadId);\n\t\t\t        if (request !\u003d null) {\n\t\t\t\t\t\t            request.setStatus(Status.QUEUED);\n\t\t\t\t\t\t            request.setFuture(Core.getInstance()\n\t\t\t\t\t\t                    .getExecutorSupplier()\n\t\t\t\t\t\t                    .forDownloadTasks()\n\t\t\t\t\t\t                    .submit(new DownloadRunnable(request)));\n\t\t\t\t\t\t        }\n\t\t\t    }\n    private void cancelAndRemoveFromMap(DownloadRequest request) {\n\t\t\t        if (request !\u003d null) {\n\t\t\t\t\t\t            request.cancel();\n\t\t\t\t\t\t            currentRequestMap.remove(request.getDownloadId());\n\t\t\t\t\t\t        }\n\t\t\t    }\n    public void cancel(int downloadId) {\n\t\t\t        DownloadRequest request \u003d currentRequestMap.get(downloadId);\n\t\t\t        cancelAndRemoveFromMap(request);\n\t\t\t    }\n    public void cancel(Object tag) {\n\t\t\t        for (Map.Entry\u003cInteger, DownloadRequest\u003e currentRequestMapEntry : currentRequestMap.entrySet()) {\n\t\t\t\t\t\t            DownloadRequest request \u003d currentRequestMapEntry.getValue();\n\t\t\t\t\t\t            if (request.getTag() instanceof String \u0026\u0026 tag instanceof String) {\n\t\t\t\t\t\t\t\t\t                final String tempRequestTag \u003d (String) request.getTag();\n\t\t\t\t\t\t\t\t\t                final String tempTag \u003d (String) tag;\n\t\t\t\t\t\t\t\t\t                if (tempRequestTag.equals(tempTag)) {\n\t\t\t\t\t\t\t\t\t\t\t\t                    cancelAndRemoveFromMap(request);\n\t\t\t\t\t\t\t\t\t\t\t\t                }\n\t\t\t\t\t\t\t\t\t            } else if (request.getTag().equals(tag)) {\n\t\t\t\t\t\t\t\t\t                cancelAndRemoveFromMap(request);\n\t\t\t\t\t\t\t\t\t            }\n\t\t\t\t\t\t        }\n\t\t\t    }\n    public void cancelAll() {\n\t\t\t        for (Map.Entry\u003cInteger, DownloadRequest\u003e currentRequestMapEntry : currentRequestMap.entrySet()) {\n\t\t\t\t\t\t            DownloadRequest request \u003d currentRequestMapEntry.getValue();\n\t\t\t\t\t\t            cancelAndRemoveFromMap(request);\n\t\t\t\t\t\t        }\n\t\t\t    }\n    public Status getStatus(int downloadId) {\n\t\t\t        DownloadRequest request \u003d currentRequestMap.get(downloadId);\n\t\t\t        if (request !\u003d null) {\n\t\t\t\t\t\t            return request.getStatus();\n\t\t\t\t\t\t        }\n\t\t\t        return Status.UNKNOWN;\n\t\t\t    }\n    public void addRequest(DownloadRequest request) {\n\t\t\t        currentRequestMap.put(request.getDownloadId(), request);\n\t\t\t        request.setStatus(Status.QUEUED);\n\t\t\t        request.setSequenceNumber(getSequenceNumber());\n\t\t\t        request.setFuture(Core.getInstance()\n\t\t\t                .getExecutorSupplier()\n\t\t\t                .forDownloadTasks()\n\t\t\t                .submit(new DownloadRunnable(request)));\n\t\t\t    }\n    public void finish(DownloadRequest request) {\n\t\t\t        currentRequestMap.remove(request.getDownloadId());\n\t\t\t    }\n}\n\n\npublic static class DownloadModel {\n    static final String ID \u003d \"id\";\n    static final String URL \u003d \"url\";\n    static final String ETAG \u003d \"etag\";\n    static final String DIR_PATH \u003d \"dir_path\";\n    static final String FILE_NAME \u003d \"file_name\";\n    static final String TOTAL_BYTES \u003d \"total_bytes\";\n    static final String DOWNLOADED_BYTES \u003d \"downloaded_bytes\";\n    static final String LAST_MODIFIED_AT \u003d \"last_modified_at\";\n    private int id;\n    private String url;\n    private String eTag;\n    private String dirPath;\n    private String fileName;\n    private long totalBytes;\n    private long downloadedBytes;\n    private long lastModifiedAt;\n    public int getId() {\n\t\t\t        return id;\n\t\t\t    }\n    public void setId(int id) {\n\t\t\t        this.id \u003d id;\n\t\t\t    }\n    public String getUrl() {\n\t\t\t        return url;\n\t\t\t    }\n    public void setUrl(String url) {\n\t\t\t        this.url \u003d url;\n\t\t\t    }\n    public String getETag() {\n\t\t\t        return eTag;\n\t\t\t    }\n    public void setETag(String eTag) {\n\t\t\t        this.eTag \u003d eTag;\n\t\t\t    }\n    public String getDirPath() {\n\t\t\t        return dirPath;\n\t\t\t    }\n    public void setDirPath(String dirPath) {\n\t\t\t        this.dirPath \u003d dirPath;\n\t\t\t    }\n    public String getFileName() {\n\t\t\t        return fileName;\n\t\t\t    }\n    public void setFileName(String fileName) {\n\t\t\t        this.fileName \u003d fileName;\n\t\t\t    }\n    public long getTotalBytes() {\n\t\t\t        return totalBytes;\n\t\t\t    }\n    public void setTotalBytes(long totalBytes) {\n\t\t\t        this.totalBytes \u003d totalBytes;\n\t\t\t    }\n    public long getDownloadedBytes() {\n\t\t\t        return downloadedBytes;\n\t\t\t    }\n    public void setDownloadedBytes(long downloadedBytes) {\n\t\t\t        this.downloadedBytes \u003d downloadedBytes;\n\t\t\t    }\n    public long getLastModifiedAt() {\n\t\t\t        return lastModifiedAt;\n\t\t\t    }\n    public void setLastModifiedAt(long lastModifiedAt) {\n\t\t\t        this.lastModifiedAt \u003d lastModifiedAt;\n\t\t\t    }\n}\n\n\n\npublic static class AppDbHelper implements DbHelper {\n\n    public static final String TABLE_NAME \u003d \"prdownloader\";\n    private final android.database.sqlite.SQLiteDatabase db;\n    public AppDbHelper(Context context) {\n\t\t\t        DatabaseOpenHelper databaseOpenHelper \u003d new DatabaseOpenHelper(context);\n\t\t\t        db \u003d databaseOpenHelper.getWritableDatabase();\n\t\t\t    }\n    @Override\n    public DownloadModel find(int id) {\n\t\t\t        android.database.Cursor cursor \u003d null;\n\t\t\t        DownloadModel model \u003d null;\n\t\t\t        try {\n\t\t\t\t\t\t            cursor \u003d db.rawQuery(\"SELECT * FROM \" + TABLE_NAME + \" WHERE \" +\n\t\t\t\t\t\t                    DownloadModel.ID + \" \u003d \" + id, null);\n\t\t\t\t\t\t            if (cursor !\u003d null \u0026\u0026 cursor.moveToFirst()) {\n\t\t\t\t\t\t\t\t\t                model \u003d new DownloadModel();\n\t\t\t\t\t\t\t\t\t                model.setId(id);\n\t\t\t\t\t\t\t\t\t                model.setUrl(cursor.getString(cursor.getColumnIndex(DownloadModel.URL)));\n\t\t\t\t\t\t\t\t\t                model.setETag(cursor.getString(cursor.getColumnIndex(DownloadModel.ETAG)));\n\t\t\t\t\t\t\t\t\t                model.setDirPath(cursor.getString(cursor.getColumnIndex(DownloadModel.DIR_PATH)));\n\t\t\t\t\t\t\t\t\t                model.setFileName(cursor.getString(cursor.getColumnIndex(DownloadModel.FILE_NAME)));\n\t\t\t\t\t\t\t\t\t                model.setTotalBytes(cursor.getLong(cursor.getColumnIndex(DownloadModel.TOTAL_BYTES)));\n\t\t\t\t\t\t\t\t\t                model.setDownloadedBytes(cursor.getLong(cursor.getColumnIndex(DownloadModel.DOWNLOADED_BYTES)));\n\t\t\t\t\t\t\t\t\t                model.setLastModifiedAt(cursor.getLong(cursor.getColumnIndex(DownloadModel.LAST_MODIFIED_AT)));\n\t\t\t\t\t\t\t\t\t            }\n\t\t\t\t\t\t        } catch (Exception e) {\n\t\t\t\t\t\t            e.printStackTrace();\n\t\t\t\t\t\t        } finally {\n\t\t\t\t\t\t            if (cursor !\u003d null) {\n\t\t\t\t\t\t\t\t\t                cursor.close();\n\t\t\t\t\t\t\t\t\t            }\n\t\t\t\t\t\t        }\n\t\t\t        return model;\n\t\t\t    }\n    @Override\n    public void insert(DownloadModel model) {\n\t\t\t        try {\n\t\t\t\t\t\t            ContentValues values \u003d new ContentValues();\n\t\t\t\t\t\t            values.put(DownloadModel.ID, model.getId());\n\t\t\t\t\t\t            values.put(DownloadModel.URL, model.getUrl());\n\t\t\t\t\t\t            values.put(DownloadModel.ETAG, model.getETag());\n\t\t\t\t\t\t            values.put(DownloadModel.DIR_PATH, model.getDirPath());\n\t\t\t\t\t\t            values.put(DownloadModel.FILE_NAME, model.getFileName());\n\t\t\t\t\t\t            values.put(DownloadModel.TOTAL_BYTES, model.getTotalBytes());\n\t\t\t\t\t\t            values.put(DownloadModel.DOWNLOADED_BYTES, model.getDownloadedBytes());\n\t\t\t\t\t\t            values.put(DownloadModel.LAST_MODIFIED_AT, model.getLastModifiedAt());\n\t\t\t\t\t\t            db.insert(TABLE_NAME, null, values);\n\t\t\t\t\t\t        } catch (Exception e) {\n\t\t\t\t\t\t            e.printStackTrace();\n\t\t\t\t\t\t        }\n\t\t\t    }\n    @Override\n    public void update(DownloadModel model) {\n\t\t\t        try {\n\t\t\t\t\t\t            ContentValues values \u003d new ContentValues();\n\t\t\t\t\t\t            values.put(DownloadModel.URL, model.getUrl());\n\t\t\t\t\t\t            values.put(DownloadModel.ETAG, model.getETag());\n\t\t\t\t\t\t            values.put(DownloadModel.DIR_PATH, model.getDirPath());\n\t\t\t\t\t\t            values.put(DownloadModel.FILE_NAME, model.getFileName());\n\t\t\t\t\t\t            values.put(DownloadModel.TOTAL_BYTES, model.getTotalBytes());\n\t\t\t\t\t\t            values.put(DownloadModel.DOWNLOADED_BYTES, model.getDownloadedBytes());\n\t\t\t\t\t\t            values.put(DownloadModel.LAST_MODIFIED_AT, model.getLastModifiedAt());\n\t\t\t\t\t\t            db.update(TABLE_NAME, values, DownloadModel.ID + \" \u003d ? \",\n\t\t\t\t\t\t                    new String[]{String.valueOf(model.getId())});\n\t\t\t\t\t\t        } catch (Exception e) {\n\t\t\t\t\t\t            e.printStackTrace();\n\t\t\t\t\t\t        }\n\t\t\t    }\n    @Override\n    public void updateProgress(int id, long downloadedBytes, long lastModifiedAt) {\n\t\t\t        try {\n\t\t\t\t\t\t            ContentValues values \u003d new ContentValues();\n\t\t\t\t\t\t            values.put(DownloadModel.DOWNLOADED_BYTES, downloadedBytes);\n\t\t\t\t\t\t            values.put(DownloadModel.LAST_MODIFIED_AT, lastModifiedAt);\n\t\t\t\t\t\t            db.update(TABLE_NAME, values, DownloadModel.ID + \" \u003d ? \",\n\t\t\t\t\t\t                    new String[]{String.valueOf(id)});\n\t\t\t\t\t\t        } catch (Exception e) {\n\t\t\t\t\t\t            e.printStackTrace();\n\t\t\t\t\t\t        }\n\t\t\t    }\n    @Override\n    public void remove(int id) {\n\t\t\t        try {\n\t\t\t\t\t\t            db.execSQL(\"DELETE FROM \" + TABLE_NAME + \" WHERE \" +\n\t\t\t\t\t\t                    DownloadModel.ID + \" \u003d \" + id);\n\t\t\t\t\t\t        } catch (Exception e) {\n\t\t\t\t\t\t            e.printStackTrace();\n\t\t\t\t\t\t        }\n\t\t\t    }\n    @Override\n    public List\u003cDownloadModel\u003e getUnwantedModels(int days) {\n\t\t\t        List\u003cDownloadModel\u003e models \u003d new ArrayList\u003c\u003e();\n\t\t\t        android.database.Cursor cursor \u003d null;\n\t\t\t        try {\n\t\t\t\t\t\t            final long daysInMillis \u003d days * 24 * 60 * 60 * 1000L;\n\t\t\t\t\t\t            final long beforeTimeInMillis \u003d System.currentTimeMillis() - daysInMillis;\n\t\t\t\t\t\t            cursor \u003d db.rawQuery(\"SELECT * FROM \" + TABLE_NAME + \" WHERE \" +\n\t\t\t\t\t\t                    DownloadModel.LAST_MODIFIED_AT + \" \u003c\u003d \" + beforeTimeInMillis, null);\n\t\t\t\t\t\t            if (cursor !\u003d null \u0026\u0026 cursor.moveToFirst()) {\n\t\t\t\t\t\t\t\t\t                do {\n\t\t\t\t\t\t\t\t\t\t\t\t                    DownloadModel model \u003d new DownloadModel();\n\t\t\t\t\t\t\t\t\t\t\t\t                    model.setId(cursor.getInt(cursor.getColumnIndex(DownloadModel.ID)));\n\t\t\t\t\t\t\t\t\t\t\t\t                    model.setUrl(cursor.getString(cursor.getColumnIndex(DownloadModel.URL)));\n\t\t\t\t\t\t\t\t\t\t\t\t                    model.setETag(cursor.getString(cursor.getColumnIndex(DownloadModel.ETAG)));\n\t\t\t\t\t\t\t\t\t\t\t\t                    model.setDirPath(cursor.getString(cursor.getColumnIndex(DownloadModel.DIR_PATH)));\n\t\t\t\t\t\t\t\t\t\t\t\t                    model.setFileName(cursor.getString(cursor.getColumnIndex(DownloadModel.FILE_NAME)));\n\t\t\t\t\t\t\t\t\t\t\t\t                    model.setTotalBytes(cursor.getLong(cursor.getColumnIndex(DownloadModel.TOTAL_BYTES)));\n\t\t\t\t\t\t\t\t\t\t\t\t                    model.setDownloadedBytes(cursor.getLong(cursor.getColumnIndex(DownloadModel.DOWNLOADED_BYTES)));\n\t\t\t\t\t\t\t\t\t\t\t\t                    model.setLastModifiedAt(cursor.getLong(cursor.getColumnIndex(DownloadModel.LAST_MODIFIED_AT)));\n\t\t\t\t\t\t\t\t\t\t\t\t                    models.add(model);\n\t\t\t\t\t\t\t\t\t\t\t\t                } while (cursor.moveToNext());\n\t\t\t\t\t\t\t\t\t            }\n\t\t\t\t\t\t        } catch (Exception e) {\n\t\t\t\t\t\t            e.printStackTrace();\n\t\t\t\t\t\t        } finally {\n\t\t\t\t\t\t            if (cursor !\u003d null) {\n\t\t\t\t\t\t\t\t\t                cursor.close();\n\t\t\t\t\t\t\t\t\t            }\n\t\t\t\t\t\t        }\n\t\t\t        return models;\n\t\t\t    }\n    @Override\n    public void clear() {\n\t\t\t        try {\n\t\t\t\t\t\t            db.delete(TABLE_NAME, null, null);\n\t\t\t\t\t\t        } catch (Exception e) {\n\t\t\t\t\t\t            e.printStackTrace();\n\t\t\t\t\t\t        }\n\t\t\t    }\n}\n\npublic static class DatabaseOpenHelper extends android.database.sqlite.SQLiteOpenHelper {\n    private static final String DATABASE_NAME \u003d \"prdownloader.db\";\n    private static final int DATABASE_VERSION \u003d 1;\n    DatabaseOpenHelper(Context context) {\n\t\t\t        super(context, DATABASE_NAME, null, DATABASE_VERSION);\n\t\t\t    }\n    @Override\n    public void onCreate(android.database.sqlite.SQLiteDatabase db) {\n\t\t\t        db.execSQL(\"CREATE TABLE IF NOT EXISTS \" +\n\t\t\t                AppDbHelper.TABLE_NAME + \"( \" +\n\t\t\t                DownloadModel.ID + \" INTEGER PRIMARY KEY, \" +\n\t\t\t                DownloadModel.URL + \" VARCHAR, \" +\n\t\t\t                DownloadModel.ETAG + \" VARCHAR, \" +\n\t\t\t                DownloadModel.DIR_PATH + \" VARCHAR, \" +\n\t\t\t                DownloadModel.FILE_NAME + \" VARCHAR, \" +\n\t\t\t                DownloadModel.TOTAL_BYTES + \" INTEGER, \" +\n\t\t\t                DownloadModel.DOWNLOADED_BYTES + \" INTEGER, \" +\n\t\t\t                DownloadModel.LAST_MODIFIED_AT + \" INTEGER \" +\n\t\t\t                \")\");\n\t\t\t    }\n    @Override\n    public void onUpgrade(android.database.sqlite.SQLiteDatabase db, int i, int i1) {\n\t\t\t    }\n}\n\npublic static interface DbHelper {\n    DownloadModel find(int id);\n    void insert(DownloadModel model);\n    void update(DownloadModel model);\n    void updateProgress(int id, long downloadedBytes, long lastModifiedAt);\n    void remove(int id);\n    List\u003cDownloadModel\u003e getUnwantedModels(int days);\n    void clear();\n}\n\n\npublic static class NoOpsDbHelper implements DbHelper {\n    public NoOpsDbHelper() {\n\t\t\t    }\n    @Override\n    public DownloadModel find(int id) {\n\t\t\t        return null;\n\t\t\t    }\n    @Override\n    public void insert(DownloadModel model) {\n\t\t\t    }\n    @Override\n    public void update(DownloadModel model) {\n\t\t\t    }\n    @Override\n    public void updateProgress(int id, long downloadedBytes, long lastModifiedAt) {\n\t\t\t    }\n    @Override\n    public void remove(int id) {\n\t\t\t    }\n    @Override\n    public List\u003cDownloadModel\u003e getUnwantedModels(int days) {\n\t\t\t        return null;\n\t\t\t    }\n    @Override\n    public void clear() {\n\t\t\t    }\n}\n\npublic static class DownloadFutureTask extends java.util.concurrent.FutureTask\u003cDownloadRunnable\u003e implements Comparable\u003cDownloadFutureTask\u003e {\n    private final DownloadRunnable runnable;\n    DownloadFutureTask(DownloadRunnable downloadRunnable) {\n\t\t\t        super(downloadRunnable, null);\n\t\t\t        this.runnable \u003d downloadRunnable;\n\t\t\t    }\n    @Override\n    public int compareTo(DownloadFutureTask other) {\n\t\t\t        Priority p1 \u003d runnable.priority;\n\t\t\t        Priority p2 \u003d other.runnable.priority;\n\t\t\t        return (p1 \u003d\u003d p2 ? runnable.sequence - other.runnable.sequence : p2.ordinal() - p1.ordinal());\n\t\t\t    }\n}\n\npublic static class DownloadExecutor extends java.util.concurrent.ThreadPoolExecutor {\n    DownloadExecutor(int maxNumThreads, java.util.concurrent.ThreadFactory threadFactory) {\n\t\t\t        super(maxNumThreads, maxNumThreads, 0, java.util.concurrent.TimeUnit.MILLISECONDS,\n\t\t\t                new java.util.concurrent.PriorityBlockingQueue\u003cRunnable\u003e(), threadFactory);\n\t\t\t    }\n    @Override\n    public java.util.concurrent.Future\u003c?\u003e submit(Runnable task) {\n\t\t\t        DownloadFutureTask futureTask \u003d new DownloadFutureTask((DownloadRunnable) task);\n\t\t\t        execute(futureTask);\n\t\t\t        return futureTask;\n\t\t\t    }\n}\n{\r\n}\nprivate int downloadId;\nprivate static String dirPath;\npublic static final class Utilss {\n    private Utilss() {\n\t    }\n    public static String getRootDirPath(Context context) {\n\t        if (Environment.MEDIA_MOUNTED.equals(Environment.getExternalStorageState())) {\n\t\t           // java.io.File file \u003d context.getExternalFilesDirs(context.getApplicationContext(), null)[0];\n\t\t           // return file.getAbsolutePath();\n\t\t            return context.getApplicationContext().getFilesDir().getAbsolutePath();\n\t\t        } else {\n\t\t            return context.getApplicationContext().getFilesDir().getAbsolutePath();\n\t\t        }\n\t    }\n    public static String getProgressDisplayLine(long currentBytes, long totalBytes) {\n\t        return getBytesToMBString(currentBytes) + \"/\" + getBytesToMBString(totalBytes);\n\t    }\n    private static String getBytesToMBString(long bytes){\n\t        return String.format(Locale.ENGLISH, \"\", bytes / (1024.00 * 1024.00));\n\t    }\n}\n{","color":"#FFFF9800","name":"download av129292","typeName":"","palette":"9","type":" ","spec":"Place this block in more blocks"},{"code":"PRDownloaderConfig config \u003d PRDownloaderConfig.newBuilder()\n\t.setDatabaseEnabled(true)\n\t.build();\nPRDownloader.initialize(%1$s.this, config);\n\n\n\n%5$s.setOnClickListener(new View.OnClickListener() {\npublic void onClick(View v) {\n\n\tif (Status.RUNNING \u003d\u003d PRDownloader.getStatus(downloadId)) {\n\t\tPRDownloader.pause(downloadId);\n\t\treturn;\n\t}\n\n\n\n\n\n\n\n\tif (Status.PAUSED \u003d\u003d PRDownloader.getStatus(downloadId)) {\n\t\tPRDownloader.resume(downloadId);\n\t\treturn;\n\t}\n\tdownloadId \u003d PRDownloader.download(%2$s\n, %3$s, %4$s)\n\t\t.build()\n\t\t.setOnStartOrResumeListener(new OnStartOrResumeListener() {\n\t\t\t@Override\n\t\t\tpublic void onStartOrResume() {\n\t\t\t}\n\t})\n\t.setOnPauseListener(new OnPauseListener() {\n\t\t@Override\n\t\tpublic void onPause() {\n\t\t}\n\t})\n\t.setOnCancelListener(new OnCancelListener() {\n\t\t@Override\n\t\tpublic void onCancel() {\n\t\t}\n\t})\n\t.setOnProgressListener(new OnProgressListener() {\n\t\t@Override\n\t\tpublic void onProgress(Progress progress) {\nlong progressPercent \u003d progress.currentBytes * 100 / progress.totalBytes;\n%6$s\n\t\t\n\t\t}\n\t})\n\t.start(new OnDownloadListener() {\n\t\t@Override\n\t\tpublic void onDownloadComplete() {\n%7$s\n\t\t}\n\t\t@Override\n\t\tpublic void onError(Error error) {\n\t\t}\n\t});\n\n\n\n\n}\n});\n\n\n\n","color":"#FF00C890","name":"vouvuobpuvpivigj","typeName":"","palette":"9","type":"e","spec":"class %m.activity Download file from link %s save to path %s with name %s  Click to start downloading  %m.view ","spec2":"When the download is completed successfully"},{"code":"PRDownloader.cancel(downloadId);","color":"#FFFF6080","name":"vouvuobpuvpivigj_copy80","typeName":"","palette":"9","type":" ","spec":"stop download","spec2":"complete"},{"code":"(int)progressPercent","color":"#FF42A5F5","name":"iuogu0g07g9g","typeName":"","palette":"9","type":"d","spec":"Amount downloaded "}]